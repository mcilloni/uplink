// Code generated by protoc-gen-go.
// source: uplink.proto
// DO NOT EDIT!

/*
Package protodef is a generated protocol buffer package.

It is generated from these files:
	uplink.proto

It has these top-level messages:
	Empty
	BoolResp
	Username
	AuthInfo
	SessInfo
	Notification
	FriendList
*/
package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Notification_Type int32

const (
	Notification_MESSAGE    Notification_Type = 0
	Notification_FRIENDSHIP Notification_Type = 1
	Notification_INVITE     Notification_Type = 2
)

var Notification_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "FRIENDSHIP",
	2: "INVITE",
}
var Notification_Type_value = map[string]int32{
	"MESSAGE":    0,
	"FRIENDSHIP": 1,
	"INVITE":     2,
}

func (x Notification_Type) String() string {
	return proto.EnumName(Notification_Type_name, int32(x))
}
func (Notification_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BoolResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BoolResp) Reset()                    { *m = BoolResp{} }
func (m *BoolResp) String() string            { return proto.CompactTextString(m) }
func (*BoolResp) ProtoMessage()               {}
func (*BoolResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Username struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Username) Reset()                    { *m = Username{} }
func (m *Username) String() string            { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()               {}
func (*Username) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AuthInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *AuthInfo) Reset()                    { *m = AuthInfo{} }
func (m *AuthInfo) String() string            { return proto.CompactTextString(m) }
func (*AuthInfo) ProtoMessage()               {}
func (*AuthInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SessInfo struct {
	Uid       int64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessInfo) Reset()                    { *m = SessInfo{} }
func (m *SessInfo) String() string            { return proto.CompactTextString(m) }
func (*SessInfo) ProtoMessage()               {}
func (*SessInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Notification struct {
	Type       Notification_Type `protobuf:"varint,1,opt,name=type,enum=protodef.Notification_Type" json:"type,omitempty"`
	SenderName string            `protobuf:"bytes,2,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	ConvId     int64             `protobuf:"varint,3,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	Body       string            `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type FriendList struct {
	Friends []string `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
}

func (m *FriendList) Reset()                    { *m = FriendList{} }
func (m *FriendList) String() string            { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()               {}
func (*FriendList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Empty)(nil), "protodef.Empty")
	proto.RegisterType((*BoolResp)(nil), "protodef.BoolResp")
	proto.RegisterType((*Username)(nil), "protodef.Username")
	proto.RegisterType((*AuthInfo)(nil), "protodef.AuthInfo")
	proto.RegisterType((*SessInfo)(nil), "protodef.SessInfo")
	proto.RegisterType((*Notification)(nil), "protodef.Notification")
	proto.RegisterType((*FriendList)(nil), "protodef.FriendList")
	proto.RegisterEnum("protodef.Notification_Type", Notification_Type_name, Notification_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Uplink service

type UplinkClient interface {
	Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolResp, error)
	Friends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error)
	Login(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error)
	NewUser(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error)
	Notifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Uplink_NotificationsClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResp, error)
}

type uplinkClient struct {
	cc *grpc.ClientConn
}

func NewUplinkClient(cc *grpc.ClientConn) UplinkClient {
	return &uplinkClient{cc}
}

func (c *uplinkClient) Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Friends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error) {
	out := new(FriendList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Friends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Login(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error) {
	out := new(SessInfo)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) NewUser(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error) {
	out := new(SessInfo)
	err := grpc.Invoke(ctx, "/protodef.Uplink/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Notifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Uplink_NotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Uplink_serviceDesc.Streams[0], c.cc, "/protodef.Uplink/Notifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &uplinkNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Uplink_NotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type uplinkNotificationsClient struct {
	grpc.ClientStream
}

func (x *uplinkNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uplinkClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uplink service

type UplinkServer interface {
	Exists(context.Context, *Username) (*BoolResp, error)
	Friends(context.Context, *Empty) (*FriendList, error)
	Login(context.Context, *AuthInfo) (*SessInfo, error)
	NewUser(context.Context, *AuthInfo) (*SessInfo, error)
	Notifications(*Empty, Uplink_NotificationsServer) error
	Ping(context.Context, *Empty) (*BoolResp, error)
}

func RegisterUplinkServer(s *grpc.Server, srv UplinkServer) {
	s.RegisterService(&_Uplink_serviceDesc, srv)
}

func _Uplink_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Exists(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Friends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Friends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Friends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Friends(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Login(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).NewUser(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Notifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UplinkServer).Notifications(m, &uplinkNotificationsServer{stream})
}

type Uplink_NotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type uplinkNotificationsServer struct {
	grpc.ServerStream
}

func (x *uplinkNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Uplink_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodef.Uplink",
	HandlerType: (*UplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Uplink_Exists_Handler,
		},
		{
			MethodName: "Friends",
			Handler:    _Uplink_Friends_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Uplink_Login_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _Uplink_NewUser_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Uplink_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notifications",
			Handler:       _Uplink_Notifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("uplink.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x49, 0x6a, 0xbb, 0x93, 0x52, 0xa2, 0x15, 0x82, 0x28, 0x88, 0x0f, 0xad, 0x10, 0x02,
	0x21, 0xb9, 0x21, 0xdc, 0xe0, 0xd4, 0x08, 0x03, 0x96, 0x8a, 0x15, 0x39, 0x2d, 0xd7, 0x2a, 0xb1,
	0xd7, 0xe9, 0x0a, 0x7b, 0xd7, 0xf2, 0xae, 0x81, 0xfc, 0x34, 0x2e, 0xfc, 0x36, 0xf6, 0x03, 0x37,
	0x96, 0xf0, 0x81, 0x93, 0x67, 0xde, 0xcc, 0x9b, 0x37, 0xb3, 0x4f, 0x86, 0x93, 0xa6, 0x2a, 0x28,
	0xfb, 0x16, 0x54, 0x35, 0x97, 0x1c, 0xf9, 0xe6, 0x93, 0x91, 0x1c, 0x7b, 0x70, 0x14, 0x96, 0x95,
	0xdc, 0xe3, 0xe7, 0xe0, 0x2f, 0x39, 0x2f, 0x12, 0x22, 0x2a, 0x34, 0x05, 0x4f, 0x34, 0x69, 0x4a,
	0x84, 0x98, 0x3a, 0xcf, 0x9c, 0x97, 0x7e, 0xd2, 0xa6, 0xf8, 0x09, 0xf8, 0x57, 0x82, 0xd4, 0x6c,
	0x53, 0x12, 0x84, 0x60, 0xa4, 0xbf, 0xa6, 0xe5, 0x38, 0x31, 0x31, 0x5e, 0x80, 0x7f, 0xde, 0xc8,
	0x9b, 0x88, 0xe5, 0xbc, 0xaf, 0xae, 0xb1, 0x6a, 0xa3, 0xc6, 0x0e, 0x2c, 0xa6, 0x63, 0xfc, 0x1e,
	0xfc, 0xb5, 0x9a, 0x6d, 0x38, 0x13, 0x18, 0x36, 0x34, 0x33, 0x94, 0x61, 0xa2, 0x43, 0xf4, 0x18,
	0x40, 0xa8, 0x2a, 0xe5, 0xec, 0x5a, 0x15, 0x2c, 0xef, 0xf8, 0x2f, 0x12, 0x65, 0xf8, 0xb7, 0x03,
	0x27, 0x31, 0x97, 0x34, 0xa7, 0xe9, 0x46, 0x2a, 0x08, 0x9d, 0xc1, 0x48, 0xee, 0x2b, 0xab, 0x7a,
	0xba, 0x78, 0x14, 0xb4, 0x97, 0x06, 0xdd, 0xae, 0xe0, 0x52, 0xb5, 0x24, 0xa6, 0x11, 0x3d, 0x85,
	0xb1, 0x20, 0x2c, 0x23, 0xf5, 0xb5, 0xd9, 0xd6, 0x2a, 0x80, 0x85, 0x62, 0xbd, 0xf3, 0x43, 0xf0,
	0x52, 0xce, 0xbe, 0x6b, 0xf9, 0xa1, 0xd9, 0xcb, 0xd5, 0x69, 0x94, 0xe9, 0x63, 0xb6, 0x3c, 0xdb,
	0x4f, 0x47, 0xf6, 0x18, 0x1d, 0x63, 0x25, 0xaf, 0x67, 0xa3, 0x31, 0x78, 0x5f, 0xc2, 0xf5, 0xfa,
	0xfc, 0x53, 0x38, 0xb9, 0x83, 0x4e, 0x01, 0x3e, 0x26, 0x51, 0x18, 0x7f, 0x58, 0x7f, 0x8e, 0x56,
	0x13, 0x07, 0x01, 0xb8, 0x51, 0xfc, 0x35, 0xba, 0x0c, 0x27, 0x03, 0xfc, 0x42, 0xd5, 0x6a, 0xaa,
	0xd4, 0x2e, 0xa8, 0x90, 0xfa, 0xe5, 0x73, 0x93, 0xe9, 0x97, 0x1f, 0xaa, 0xa9, 0x6d, 0xba, 0xf8,
	0x35, 0x00, 0xf7, 0xca, 0x78, 0x88, 0xe6, 0xe0, 0x86, 0x3f, 0x55, 0xb7, 0x40, 0xe8, 0x70, 0x5e,
	0x6b, 0xcb, 0xac, 0x83, 0xdd, 0x1a, 0x3a, 0x07, 0xcf, 0x8a, 0x08, 0x74, 0xef, 0x50, 0x36, 0xc6,
	0xcf, 0xee, 0x1f, 0x80, 0xce, 0x22, 0x67, 0x70, 0x74, 0xc1, 0x77, 0x94, 0x75, 0x25, 0x5a, 0x67,
	0xbb, 0x12, 0xb7, 0xce, 0xbd, 0x01, 0x2f, 0x26, 0x3f, 0xf4, 0x16, 0xff, 0x4d, 0x79, 0x07, 0x77,
	0xbb, 0xa6, 0xf4, 0xec, 0xf6, 0xa0, 0xdf, 0xbe, 0xb9, 0x83, 0x5e, 0xc3, 0x68, 0x45, 0xd9, 0xee,
	0x5f, 0x4a, 0xcf, 0xf9, 0xcb, 0x57, 0x30, 0x4b, 0x79, 0x19, 0xec, 0xa8, 0xbc, 0x69, 0xb6, 0x41,
	0x99, 0xd2, 0xa2, 0xe0, 0x8c, 0x06, 0xf6, 0x97, 0x58, 0x8e, 0xed, 0xb3, 0xae, 0x34, 0x6d, 0xeb,
	0x1a, 0xf6, 0xdb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xf9, 0x1c, 0x27, 0x30, 0x03, 0x00,
	0x00,
}
