// Code generated by protoc-gen-go.
// source: uplink.proto
// DO NOT EDIT!

/*
Package protodef is a generated protocol buffer package.

It is generated from these files:
	uplink.proto

It has these top-level messages:
	Empty
	BoolResp
	Name
	ID
	AuthInfo
	SessInfo
	Notification
	FriendList
	ConversationList
	Conversation
	InviteList
	Invite
	FetchOpts
	MessageList
	Message
	NewMsgReq
	NewMsgResp
	RegID
*/
package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Notification_Type int32

const (
	Notification_MESSAGE        Notification_Type = 0
	Notification_FRIENDSHIP_REQ Notification_Type = 1
	Notification_FRIENDSHIP_ACC Notification_Type = 2
	Notification_JOIN_REQ       Notification_Type = 3
	Notification_JOIN_ACC       Notification_Type = 4
	Notification_HANDLER_READY  Notification_Type = 5
)

var Notification_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "FRIENDSHIP_REQ",
	2: "FRIENDSHIP_ACC",
	3: "JOIN_REQ",
	4: "JOIN_ACC",
	5: "HANDLER_READY",
}
var Notification_Type_value = map[string]int32{
	"MESSAGE":        0,
	"FRIENDSHIP_REQ": 1,
	"FRIENDSHIP_ACC": 2,
	"JOIN_REQ":       3,
	"JOIN_ACC":       4,
	"HANDLER_READY":  5,
}

func (x Notification_Type) String() string {
	return proto.EnumName(Notification_Type_name, int32(x))
}
func (Notification_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BoolResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BoolResp) Reset()                    { *m = BoolResp{} }
func (m *BoolResp) String() string            { return proto.CompactTextString(m) }
func (*BoolResp) ProtoMessage()               {}
func (*BoolResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Name struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AuthInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *AuthInfo) Reset()                    { *m = AuthInfo{} }
func (m *AuthInfo) String() string            { return proto.CompactTextString(m) }
func (*AuthInfo) ProtoMessage()               {}
func (*AuthInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SessInfo struct {
	Uid       int64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessInfo) Reset()                    { *m = SessInfo{} }
func (m *SessInfo) String() string            { return proto.CompactTextString(m) }
func (*SessInfo) ProtoMessage()               {}
func (*SessInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Notification struct {
	Type     Notification_Type `protobuf:"varint,1,opt,name=type,enum=protodef.Notification_Type" json:"type,omitempty"`
	UserName string            `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	ConvId   int64             `protobuf:"varint,3,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	ConvName string            `protobuf:"bytes,4,opt,name=conv_name,json=convName" json:"conv_name,omitempty"`
	MsgTag   int64             `protobuf:"varint,5,opt,name=msg_tag,json=msgTag" json:"msg_tag,omitempty"`
	Body     string            `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type FriendList struct {
	Friends []string `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
}

func (m *FriendList) Reset()                    { *m = FriendList{} }
func (m *FriendList) String() string            { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()               {}
func (*FriendList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ConversationList struct {
	Convs []*Conversation `protobuf:"bytes,1,rep,name=convs" json:"convs,omitempty"`
}

func (m *ConversationList) Reset()                    { *m = ConversationList{} }
func (m *ConversationList) String() string            { return proto.CompactTextString(m) }
func (*ConversationList) ProtoMessage()               {}
func (*ConversationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConversationList) GetConvs() []*Conversation {
	if m != nil {
		return m.Convs
	}
	return nil
}

type Conversation struct {
	Id          int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LastMessage *Message `protobuf:"bytes,3,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Conversation) GetLastMessage() *Message {
	if m != nil {
		return m.LastMessage
	}
	return nil
}

type InviteList struct {
	Invites []*Invite `protobuf:"bytes,1,rep,name=invites" json:"invites,omitempty"`
}

func (m *InviteList) Reset()                    { *m = InviteList{} }
func (m *InviteList) String() string            { return proto.CompactTextString(m) }
func (*InviteList) ProtoMessage()               {}
func (*InviteList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InviteList) GetInvites() []*Invite {
	if m != nil {
		return m.Invites
	}
	return nil
}

type Invite struct {
	Who      string `protobuf:"bytes,1,opt,name=who" json:"who,omitempty"`
	ConvId   int64  `protobuf:"varint,2,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	ConvName string `protobuf:"bytes,3,opt,name=conv_name,json=convName" json:"conv_name,omitempty"`
}

func (m *Invite) Reset()                    { *m = Invite{} }
func (m *Invite) String() string            { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()               {}
func (*Invite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type FetchOpts struct {
	ConvId  int64 `protobuf:"varint,1,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	LastTag int64 `protobuf:"varint,2,opt,name=last_tag,json=lastTag" json:"last_tag,omitempty"`
}

func (m *FetchOpts) Reset()                    { *m = FetchOpts{} }
func (m *FetchOpts) String() string            { return proto.CompactTextString(m) }
func (*FetchOpts) ProtoMessage()               {}
func (*FetchOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type MessageList struct {
	ConvId   int64      `protobuf:"varint,1,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	Messages []*Message `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *MessageList) Reset()                    { *m = MessageList{} }
func (m *MessageList) String() string            { return proto.CompactTextString(m) }
func (*MessageList) ProtoMessage()               {}
func (*MessageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MessageList) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Message struct {
	Tag        int64  `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	SenderName string `protobuf:"bytes,2,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Body       string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type NewMsgReq struct {
	ConvId int64  `protobuf:"varint,1,opt,name=conv_id,json=convId" json:"conv_id,omitempty"`
	Body   string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *NewMsgReq) Reset()                    { *m = NewMsgReq{} }
func (m *NewMsgReq) String() string            { return proto.CompactTextString(m) }
func (*NewMsgReq) ProtoMessage()               {}
func (*NewMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type NewMsgResp struct {
	Tag       int64 `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *NewMsgResp) Reset()                    { *m = NewMsgResp{} }
func (m *NewMsgResp) String() string            { return proto.CompactTextString(m) }
func (*NewMsgResp) ProtoMessage()               {}
func (*NewMsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type RegID struct {
	RegId string `protobuf:"bytes,1,opt,name=reg_id,json=regId" json:"reg_id,omitempty"`
}

func (m *RegID) Reset()                    { *m = RegID{} }
func (m *RegID) String() string            { return proto.CompactTextString(m) }
func (*RegID) ProtoMessage()               {}
func (*RegID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func init() {
	proto.RegisterType((*Empty)(nil), "protodef.Empty")
	proto.RegisterType((*BoolResp)(nil), "protodef.BoolResp")
	proto.RegisterType((*Name)(nil), "protodef.Name")
	proto.RegisterType((*ID)(nil), "protodef.ID")
	proto.RegisterType((*AuthInfo)(nil), "protodef.AuthInfo")
	proto.RegisterType((*SessInfo)(nil), "protodef.SessInfo")
	proto.RegisterType((*Notification)(nil), "protodef.Notification")
	proto.RegisterType((*FriendList)(nil), "protodef.FriendList")
	proto.RegisterType((*ConversationList)(nil), "protodef.ConversationList")
	proto.RegisterType((*Conversation)(nil), "protodef.Conversation")
	proto.RegisterType((*InviteList)(nil), "protodef.InviteList")
	proto.RegisterType((*Invite)(nil), "protodef.Invite")
	proto.RegisterType((*FetchOpts)(nil), "protodef.FetchOpts")
	proto.RegisterType((*MessageList)(nil), "protodef.MessageList")
	proto.RegisterType((*Message)(nil), "protodef.Message")
	proto.RegisterType((*NewMsgReq)(nil), "protodef.NewMsgReq")
	proto.RegisterType((*NewMsgResp)(nil), "protodef.NewMsgResp")
	proto.RegisterType((*RegID)(nil), "protodef.RegID")
	proto.RegisterEnum("protodef.Notification_Type", Notification_Type_name, Notification_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Uplink service

type UplinkClient interface {
	AcceptFriendship(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error)
	AcceptInvite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolResp, error)
	ConversationInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Conversation, error)
	Conversations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConversationList, error)
	Exists(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error)
	Friends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error)
	Invites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteList, error)
	Login(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error)
	Messages(ctx context.Context, in *FetchOpts, opts ...grpc.CallOption) (*MessageList, error)
	NewConversation(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ID, error)
	NewUser(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error)
	Notifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Uplink_NotificationsClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResp, error)
	ReceivedRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error)
	RequestFriendship(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error)
	SendInvite(ctx context.Context, in *Invite, opts ...grpc.CallOption) (*BoolResp, error)
	SendMessage(ctx context.Context, in *NewMsgReq, opts ...grpc.CallOption) (*NewMsgResp, error)
	SentRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error)
	SubmitRegID(ctx context.Context, in *RegID, opts ...grpc.CallOption) (*BoolResp, error)
}

type uplinkClient struct {
	cc *grpc.ClientConn
}

func NewUplinkClient(cc *grpc.ClientConn) UplinkClient {
	return &uplinkClient{cc}
}

func (c *uplinkClient) AcceptFriendship(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/AcceptFriendship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) AcceptInvite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/AcceptInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) ConversationInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := grpc.Invoke(ctx, "/protodef.Uplink/ConversationInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Conversations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConversationList, error) {
	out := new(ConversationList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Conversations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Exists(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Friends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error) {
	out := new(FriendList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Friends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Invites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InviteList, error) {
	out := new(InviteList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Invites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Login(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error) {
	out := new(SessInfo)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Messages(ctx context.Context, in *FetchOpts, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Messages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) NewConversation(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/protodef.Uplink/NewConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) NewUser(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*SessInfo, error) {
	out := new(SessInfo)
	err := grpc.Invoke(ctx, "/protodef.Uplink/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Notifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Uplink_NotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Uplink_serviceDesc.Streams[0], c.cc, "/protodef.Uplink/Notifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &uplinkNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Uplink_NotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type uplinkNotificationsClient struct {
	grpc.ClientStream
}

func (x *uplinkNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uplinkClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) ReceivedRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error) {
	out := new(FriendList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/ReceivedRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) RequestFriendship(ctx context.Context, in *Name, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/RequestFriendship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) SendInvite(ctx context.Context, in *Invite, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/SendInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) SendMessage(ctx context.Context, in *NewMsgReq, opts ...grpc.CallOption) (*NewMsgResp, error) {
	out := new(NewMsgResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) SentRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FriendList, error) {
	out := new(FriendList)
	err := grpc.Invoke(ctx, "/protodef.Uplink/SentRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) SubmitRegID(ctx context.Context, in *RegID, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/SubmitRegID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uplink service

type UplinkServer interface {
	AcceptFriendship(context.Context, *Name) (*BoolResp, error)
	AcceptInvite(context.Context, *ID) (*BoolResp, error)
	ConversationInfo(context.Context, *ID) (*Conversation, error)
	Conversations(context.Context, *Empty) (*ConversationList, error)
	Exists(context.Context, *Name) (*BoolResp, error)
	Friends(context.Context, *Empty) (*FriendList, error)
	Invites(context.Context, *Empty) (*InviteList, error)
	Login(context.Context, *AuthInfo) (*SessInfo, error)
	Messages(context.Context, *FetchOpts) (*MessageList, error)
	NewConversation(context.Context, *Name) (*ID, error)
	NewUser(context.Context, *AuthInfo) (*SessInfo, error)
	Notifications(*Empty, Uplink_NotificationsServer) error
	Ping(context.Context, *Empty) (*BoolResp, error)
	ReceivedRequests(context.Context, *Empty) (*FriendList, error)
	RequestFriendship(context.Context, *Name) (*BoolResp, error)
	SendInvite(context.Context, *Invite) (*BoolResp, error)
	SendMessage(context.Context, *NewMsgReq) (*NewMsgResp, error)
	SentRequests(context.Context, *Empty) (*FriendList, error)
	SubmitRegID(context.Context, *RegID) (*BoolResp, error)
}

func RegisterUplinkServer(s *grpc.Server, srv UplinkServer) {
	s.RegisterService(&_Uplink_serviceDesc, srv)
}

func _Uplink_AcceptFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).AcceptFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/AcceptFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).AcceptFriendship(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).AcceptInvite(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_ConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).ConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/ConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).ConversationInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Conversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Conversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Conversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Conversations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Exists(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Friends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Friends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Friends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Friends(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Invites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Invites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Invites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Invites(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Login(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Messages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Messages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Messages(ctx, req.(*FetchOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_NewConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).NewConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/NewConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).NewConversation(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).NewUser(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Notifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UplinkServer).Notifications(m, &uplinkNotificationsServer{stream})
}

type Uplink_NotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type uplinkNotificationsServer struct {
	grpc.ServerStream
}

func (x *uplinkNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Uplink_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_ReceivedRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).ReceivedRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/ReceivedRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).ReceivedRequests(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_RequestFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).RequestFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/RequestFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).RequestFriendship(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/SendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).SendInvite(ctx, req.(*Invite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).SendMessage(ctx, req.(*NewMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_SentRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).SentRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/SentRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).SentRequests(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_SubmitRegID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).SubmitRegID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/SubmitRegID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).SubmitRegID(ctx, req.(*RegID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodef.Uplink",
	HandlerType: (*UplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptFriendship",
			Handler:    _Uplink_AcceptFriendship_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _Uplink_AcceptInvite_Handler,
		},
		{
			MethodName: "ConversationInfo",
			Handler:    _Uplink_ConversationInfo_Handler,
		},
		{
			MethodName: "Conversations",
			Handler:    _Uplink_Conversations_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Uplink_Exists_Handler,
		},
		{
			MethodName: "Friends",
			Handler:    _Uplink_Friends_Handler,
		},
		{
			MethodName: "Invites",
			Handler:    _Uplink_Invites_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Uplink_Login_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _Uplink_Messages_Handler,
		},
		{
			MethodName: "NewConversation",
			Handler:    _Uplink_NewConversation_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _Uplink_NewUser_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Uplink_Ping_Handler,
		},
		{
			MethodName: "ReceivedRequests",
			Handler:    _Uplink_ReceivedRequests_Handler,
		},
		{
			MethodName: "RequestFriendship",
			Handler:    _Uplink_RequestFriendship_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _Uplink_SendInvite_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Uplink_SendMessage_Handler,
		},
		{
			MethodName: "SentRequests",
			Handler:    _Uplink_SentRequests_Handler,
		},
		{
			MethodName: "SubmitRegID",
			Handler:    _Uplink_SubmitRegID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notifications",
			Handler:       _Uplink_Notifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("uplink.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xeb, 0x73, 0x22, 0x45,
	0x10, 0x37, 0xcb, 0x63, 0x97, 0x86, 0xe4, 0x36, 0xe3, 0xdd, 0x19, 0x39, 0x5f, 0x35, 0x65, 0x59,
	0x3e, 0xb9, 0x13, 0xf5, 0x8c, 0x7a, 0x55, 0x4a, 0x02, 0xf1, 0xd6, 0x4a, 0xb8, 0xb8, 0x5c, 0x3e,
	0xf8, 0x89, 0x22, 0x30, 0x59, 0x46, 0x61, 0x77, 0x65, 0x86, 0x9c, 0xf9, 0x9b, 0xfc, 0x23, 0xb5,
	0x67, 0x66, 0x17, 0x06, 0x02, 0x57, 0xb9, 0x4f, 0x4c, 0xf7, 0xf4, 0x6f, 0xfa, 0xf5, 0xeb, 0x5e,
	0xa0, 0x36, 0x4f, 0x27, 0x3c, 0xfe, 0xab, 0x91, 0xce, 0x12, 0x99, 0x10, 0x4f, 0xff, 0x8c, 0xd8,
	0x15, 0x75, 0xa1, 0xd4, 0x99, 0xa6, 0xf2, 0x86, 0x7e, 0x0c, 0xde, 0x51, 0x92, 0x4c, 0x42, 0x26,
	0x52, 0x72, 0x00, 0xae, 0x98, 0x0f, 0x87, 0x4c, 0x88, 0x83, 0x9d, 0x8f, 0x76, 0x3e, 0xf5, 0xc2,
	0x5c, 0xa4, 0x75, 0x28, 0x76, 0x07, 0x53, 0x46, 0x08, 0x14, 0x63, 0xfc, 0xd5, 0xd7, 0x95, 0x50,
	0x9f, 0xe9, 0x7d, 0x70, 0x82, 0x36, 0xd9, 0x03, 0x87, 0x8f, 0xb4, 0xbe, 0x10, 0xe2, 0x89, 0x36,
	0xc1, 0x6b, 0xcd, 0xe5, 0x38, 0x88, 0xaf, 0x92, 0x4d, 0x28, 0xa5, 0x4b, 0x07, 0xe8, 0xc8, 0x31,
	0x3a, 0x75, 0xa6, 0x3f, 0x81, 0xd7, 0x43, 0x6f, 0x1a, 0xe3, 0x43, 0x61, 0xbe, 0x78, 0x50, 0x1d,
	0xc9, 0xfb, 0x00, 0x02, 0x6f, 0x79, 0x12, 0xf7, 0xf1, 0xc2, 0xe0, 0x2a, 0x99, 0x26, 0x18, 0xd1,
	0x7f, 0x1d, 0xa8, 0x75, 0x13, 0xc9, 0xaf, 0xf8, 0x70, 0x20, 0x51, 0x45, 0x1e, 0x43, 0x51, 0xde,
	0xa4, 0xc6, 0xeb, 0x5e, 0xf3, 0x51, 0x23, 0xcf, 0xbd, 0x61, 0x5b, 0x35, 0x5e, 0xa2, 0x49, 0xa8,
	0x0d, 0xc9, 0x23, 0xa8, 0xcc, 0x05, 0x9b, 0xf5, 0x75, 0xac, 0xe6, 0x7d, 0x4f, 0x29, 0x74, 0xe6,
	0xef, 0x80, 0x3b, 0x4c, 0xe2, 0x6b, 0xe5, 0xba, 0xa0, 0x63, 0x2a, 0x2b, 0x31, 0x18, 0x29, 0x94,
	0xbe, 0xd0, 0xa8, 0xa2, 0x41, 0x29, 0x45, 0x8e, 0x9a, 0x8a, 0xa8, 0x2f, 0x07, 0xd1, 0x41, 0xc9,
	0xa0, 0x50, 0x7c, 0x39, 0x88, 0x54, 0xfa, 0x97, 0xc9, 0xe8, 0xe6, 0xa0, 0x6c, 0xd2, 0x57, 0x67,
	0xfa, 0x27, 0x14, 0x55, 0x34, 0xa4, 0x0a, 0xee, 0x59, 0xa7, 0xd7, 0x6b, 0xfd, 0xda, 0xf1, 0xdf,
	0x42, 0xc3, 0xbd, 0x93, 0x30, 0xe8, 0x74, 0xdb, 0xbd, 0xe7, 0xc1, 0x79, 0x3f, 0xec, 0xfc, 0xee,
	0xef, 0xac, 0xe9, 0x5a, 0xc7, 0xc7, 0xbe, 0x43, 0x6a, 0xe0, 0xfd, 0xf6, 0x22, 0xe8, 0x6a, 0x8b,
	0xc2, 0x42, 0x52, 0x77, 0x45, 0xb2, 0x0f, 0xbb, 0xcf, 0x5b, 0xdd, 0xf6, 0x69, 0x27, 0xc4, 0xeb,
	0x56, 0xfb, 0x0f, 0xbf, 0x44, 0x3f, 0x01, 0x38, 0x99, 0x71, 0x16, 0x8f, 0x4e, 0xb9, 0x90, 0xaa,
	0xf1, 0x57, 0x5a, 0x52, 0x8d, 0x2f, 0x60, 0x40, 0xb9, 0x48, 0x7f, 0x01, 0xff, 0x18, 0x93, 0x61,
	0x33, 0xa1, 0xcb, 0xa5, 0xad, 0xbf, 0x84, 0x92, 0x4a, 0xd0, 0xd8, 0x56, 0x9b, 0x0f, 0x97, 0x95,
	0xb5, 0x4d, 0x43, 0x63, 0x44, 0xc7, 0x50, 0xb3, 0xd5, 0xeb, 0x44, 0x59, 0x90, 0xc3, 0xb1, 0xc8,
	0xf1, 0x2d, 0xd4, 0x26, 0x03, 0x21, 0xfb, 0x53, 0xec, 0xee, 0x20, 0x62, 0xba, 0xe2, 0xd5, 0xe6,
	0xfe, 0xd2, 0xd1, 0x99, 0xb9, 0x08, 0xab, 0xca, 0x2c, 0x13, 0xe8, 0x21, 0x40, 0x10, 0x5f, 0x73,
	0xc9, 0x74, 0x94, 0x9f, 0x83, 0xcb, 0xb5, 0x94, 0xc7, 0xe9, 0x2f, 0xe1, 0xc6, 0x2c, 0xcc, 0x0d,
	0xe8, 0x39, 0x94, 0x8d, 0x4a, 0xd1, 0xee, 0xd5, 0x38, 0xc9, 0x98, 0xaa, 0x8e, 0x76, 0xe3, 0x9d,
	0xed, 0x8d, 0x2f, 0xac, 0x36, 0x9e, 0xfe, 0x0c, 0x95, 0x13, 0x26, 0x87, 0xe3, 0x17, 0xa9, 0x14,
	0xf6, 0x13, 0x3b, 0x2b, 0x4f, 0xbc, 0x0b, 0x9e, 0xce, 0x53, 0xf1, 0xc3, 0x3c, 0xee, 0x2a, 0x19,
	0x09, 0x42, 0x2f, 0xa0, 0x9a, 0xe5, 0xa5, 0xb3, 0xd9, 0xfa, 0xc4, 0x57, 0xe0, 0x65, 0x55, 0x12,
	0x18, 0x44, 0x61, 0x73, 0x99, 0x16, 0x26, 0x34, 0x46, 0x6e, 0x99, 0xb3, 0x4a, 0x55, 0xf9, 0xcd,
	0x26, 0x0c, 0x8f, 0xe4, 0x43, 0xa8, 0x0a, 0xec, 0xfa, 0xea, 0x08, 0x80, 0x51, 0x69, 0x3a, 0xbf,
	0x07, 0x15, 0xc9, 0xf1, 0x2d, 0x39, 0x98, 0xa6, 0xd9, 0x18, 0x2c, 0x15, 0x0b, 0x4e, 0x17, 0x2d,
	0x4e, 0x1f, 0x42, 0xa5, 0xcb, 0x5e, 0x9d, 0x89, 0x28, 0x64, 0x7f, 0x6f, 0x4f, 0x22, 0x47, 0x3a,
	0x16, 0xf2, 0x19, 0x40, 0x8e, 0xc4, 0xd5, 0x74, 0x3b, 0xd8, 0x95, 0x58, 0x9c, 0xb5, 0x58, 0xe8,
	0x07, 0x50, 0x0a, 0x59, 0x84, 0x7b, 0xe9, 0x01, 0x94, 0x67, 0x2c, 0xca, 0x5d, 0x56, 0xc2, 0x12,
	0x4a, 0xc1, 0xa8, 0xf9, 0x9f, 0x0b, 0xe5, 0x0b, 0xbd, 0x1a, 0xc9, 0x53, 0xf0, 0x5b, 0xb8, 0xe5,
	0x52, 0x69, 0x06, 0x42, 0x8c, 0x79, 0x4a, 0xf6, 0xac, 0x6d, 0x81, 0x89, 0xd7, 0xc9, 0x52, 0x5e,
	0x6c, 0xcb, 0x27, 0x50, 0x33, 0xb8, 0x8c, 0x3a, 0x35, 0x8b, 0x5f, 0xed, 0x8d, 0x88, 0xc3, 0xd5,
	0x61, 0xd2, 0x7b, 0x6e, 0x15, 0xb5, 0x65, 0x96, 0xc8, 0x33, 0xd8, 0xb5, 0x65, 0x41, 0xee, 0x2d,
	0x0d, 0xf5, 0x1e, 0xaf, 0xd7, 0x37, 0x23, 0xb3, 0x81, 0x2d, 0x77, 0xfe, 0xc1, 0x83, 0xb8, 0x63,
	0x5e, 0x6e, 0x56, 0x89, 0xdb, 0x5e, 0xee, 0x2f, 0x15, 0xd6, 0xfa, 0x40, 0x84, 0xa9, 0xc1, 0xeb,
	0x11, 0xd6, 0x70, 0x3e, 0x86, 0xd2, 0x69, 0x12, 0xf1, 0x98, 0x58, 0x01, 0xe4, 0x9f, 0x0b, 0x3b,
	0xa8, 0xc5, 0xe7, 0xe0, 0x29, 0x78, 0x19, 0x6f, 0x05, 0x79, 0xdb, 0x0a, 0x22, 0x9f, 0xb1, 0xfa,
	0x83, 0x5b, 0xac, 0xcf, 0x1c, 0xdd, 0x43, 0x16, 0xad, 0x2e, 0xa0, 0xb5, 0x1a, 0xac, 0x74, 0x80,
	0x7c, 0x0d, 0x2e, 0x02, 0x2e, 0x70, 0xed, 0xdf, 0x39, 0xb6, 0x1f, 0x61, 0xd7, 0xfe, 0xa4, 0x6c,
	0x28, 0xc2, 0xc3, 0xcd, 0x1f, 0x9f, 0x27, 0x3b, 0xe4, 0x0b, 0x28, 0x9e, 0xf3, 0x38, 0xba, 0x0d,
	0xd9, 0xd4, 0x99, 0x1f, 0xc0, 0x0f, 0xd9, 0x90, 0xf1, 0x6b, 0x36, 0xc2, 0x71, 0x9a, 0x33, 0xd5,
	0xd1, 0x3b, 0xb6, 0xe8, 0x7b, 0xd8, 0xcf, 0x20, 0x6f, 0xc8, 0xf2, 0x26, 0x40, 0x0f, 0xed, 0xf3,
	0xf5, 0xb8, 0xde, 0xcd, 0x2d, 0x3c, 0xaf, 0x2a, 0x4c, 0xbe, 0x68, 0xac, 0x7e, 0x2d, 0x76, 0x81,
	0x1d, 0xa6, 0x35, 0xe6, 0xdf, 0x41, 0x0d, 0x91, 0xf2, 0x4d, 0xb3, 0x6b, 0xa2, 0xc3, 0xf9, 0xe5,
	0x94, 0x4b, 0x33, 0xf3, 0x16, 0x4a, 0x2b, 0x36, 0x05, 0x79, 0xf4, 0x19, 0xd4, 0x87, 0xc9, 0xb4,
	0x11, 0x71, 0x39, 0x9e, 0x5f, 0x36, 0xa6, 0x43, 0x3e, 0x99, 0x24, 0x31, 0x6f, 0x98, 0xff, 0x4b,
	0x47, 0x55, 0xb3, 0x1c, 0xce, 0x15, 0xec, 0xb2, 0xac, 0xd1, 0xdf, 0xfc, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xe6, 0x32, 0x21, 0x45, 0x4d, 0x09, 0x00, 0x00,
}
