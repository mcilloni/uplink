// Code generated by protoc-gen-go.
// source: uplink.proto
// DO NOT EDIT!

/*
Package protodef is a generated protocol buffer package.

It is generated from these files:
	uplink.proto

It has these top-level messages:
	ErrCodeResp
	NewUserReq
	NewUserResp
	LoginReq
	Username
	FirstChallenge
	SecondChallenge
	LoginResp
	UserInfo
	SessInfo
*/
package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_EALREADYINVITED   ErrCode = 0
	ErrCode_EEMPTYCONV        ErrCode = 1
	ErrCode_ENAMEALREADYTAKEN ErrCode = 2
	ErrCode_ENOCONV           ErrCode = 3
	ErrCode_ENOUSER           ErrCode = 4
	ErrCode_ENOTINVITED       ErrCode = 5
	ErrCode_ENOTMEMBER        ErrCode = 6
	ErrCode_ESELFINVITE       ErrCode = 7
	ErrCode_ESERVERFAULT      ErrCode = 8
	ErrCode_EBROKEPROTO       ErrCode = 9
	ErrCode_EAUTHFAIL         ErrCode = 10
)

var ErrCode_name = map[int32]string{
	0:  "EALREADYINVITED",
	1:  "EEMPTYCONV",
	2:  "ENAMEALREADYTAKEN",
	3:  "ENOCONV",
	4:  "ENOUSER",
	5:  "ENOTINVITED",
	6:  "ENOTMEMBER",
	7:  "ESELFINVITE",
	8:  "ESERVERFAULT",
	9:  "EBROKEPROTO",
	10: "EAUTHFAIL",
}
var ErrCode_value = map[string]int32{
	"EALREADYINVITED":   0,
	"EEMPTYCONV":        1,
	"ENAMEALREADYTAKEN": 2,
	"ENOCONV":           3,
	"ENOUSER":           4,
	"ENOTINVITED":       5,
	"ENOTMEMBER":        6,
	"ESELFINVITE":       7,
	"ESERVERFAULT":      8,
	"EBROKEPROTO":       9,
	"EAUTHFAIL":         10,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrCodeResp struct {
	// Types that are valid to be assigned to Response:
	//	*ErrCodeResp_Success
	//	*ErrCodeResp_ErrCode
	Response isErrCodeResp_Response `protobuf_oneof:"response"`
}

func (m *ErrCodeResp) Reset()                    { *m = ErrCodeResp{} }
func (m *ErrCodeResp) String() string            { return proto.CompactTextString(m) }
func (*ErrCodeResp) ProtoMessage()               {}
func (*ErrCodeResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isErrCodeResp_Response interface {
	isErrCodeResp_Response()
}

type ErrCodeResp_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,oneof"`
}
type ErrCodeResp_ErrCode struct {
	ErrCode ErrCode `protobuf:"varint,2,opt,name=err_code,json=errCode,enum=protodef.ErrCode,oneof"`
}

func (*ErrCodeResp_Success) isErrCodeResp_Response() {}
func (*ErrCodeResp_ErrCode) isErrCodeResp_Response() {}

func (m *ErrCodeResp) GetResponse() isErrCodeResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ErrCodeResp) GetSuccess() bool {
	if x, ok := m.GetResponse().(*ErrCodeResp_Success); ok {
		return x.Success
	}
	return false
}

func (m *ErrCodeResp) GetErrCode() ErrCode {
	if x, ok := m.GetResponse().(*ErrCodeResp_ErrCode); ok {
		return x.ErrCode
	}
	return ErrCode_EALREADYINVITED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ErrCodeResp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ErrCodeResp_OneofMarshaler, _ErrCodeResp_OneofUnmarshaler, _ErrCodeResp_OneofSizer, []interface{}{
		(*ErrCodeResp_Success)(nil),
		(*ErrCodeResp_ErrCode)(nil),
	}
}

func _ErrCodeResp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ErrCodeResp)
	// response
	switch x := m.Response.(type) {
	case *ErrCodeResp_Success:
		t := uint64(0)
		if x.Success {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ErrCodeResp_ErrCode:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ErrCode))
	case nil:
	default:
		return fmt.Errorf("ErrCodeResp.Response has unexpected type %T", x)
	}
	return nil
}

func _ErrCodeResp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ErrCodeResp)
	switch tag {
	case 1: // response.success
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &ErrCodeResp_Success{x != 0}
		return true, err
	case 2: // response.err_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &ErrCodeResp_ErrCode{ErrCode(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ErrCodeResp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ErrCodeResp)
	// response
	switch x := m.Response.(type) {
	case *ErrCodeResp_Success:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *ErrCodeResp_ErrCode:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ErrCode))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NewUserReq struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	EncPrivateKey []byte `protobuf:"bytes,3,opt,name=enc_private_key,json=encPrivateKey,proto3" json:"enc_private_key,omitempty"`
	ChToken       string `protobuf:"bytes,4,opt,name=ch_token,json=chToken" json:"ch_token,omitempty"`
	EncChToken    []byte `protobuf:"bytes,5,opt,name=enc_ch_token,json=encChToken,proto3" json:"enc_ch_token,omitempty"`
}

func (m *NewUserReq) Reset()                    { *m = NewUserReq{} }
func (m *NewUserReq) String() string            { return proto.CompactTextString(m) }
func (*NewUserReq) ProtoMessage()               {}
func (*NewUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NewUserResp struct {
	// Types that are valid to be assigned to Response:
	//	*NewUserResp_SessionInfo
	//	*NewUserResp_ErrCode
	Response isNewUserResp_Response `protobuf_oneof:"response"`
}

func (m *NewUserResp) Reset()                    { *m = NewUserResp{} }
func (m *NewUserResp) String() string            { return proto.CompactTextString(m) }
func (*NewUserResp) ProtoMessage()               {}
func (*NewUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isNewUserResp_Response interface {
	isNewUserResp_Response()
}

type NewUserResp_SessionInfo struct {
	SessionInfo *SessInfo `protobuf:"bytes,1,opt,name=session_info,json=sessionInfo,oneof"`
}
type NewUserResp_ErrCode struct {
	ErrCode ErrCode `protobuf:"varint,2,opt,name=err_code,json=errCode,enum=protodef.ErrCode,oneof"`
}

func (*NewUserResp_SessionInfo) isNewUserResp_Response() {}
func (*NewUserResp_ErrCode) isNewUserResp_Response()     {}

func (m *NewUserResp) GetResponse() isNewUserResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *NewUserResp) GetSessionInfo() *SessInfo {
	if x, ok := m.GetResponse().(*NewUserResp_SessionInfo); ok {
		return x.SessionInfo
	}
	return nil
}

func (m *NewUserResp) GetErrCode() ErrCode {
	if x, ok := m.GetResponse().(*NewUserResp_ErrCode); ok {
		return x.ErrCode
	}
	return ErrCode_EALREADYINVITED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NewUserResp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NewUserResp_OneofMarshaler, _NewUserResp_OneofUnmarshaler, _NewUserResp_OneofSizer, []interface{}{
		(*NewUserResp_SessionInfo)(nil),
		(*NewUserResp_ErrCode)(nil),
	}
}

func _NewUserResp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NewUserResp)
	// response
	switch x := m.Response.(type) {
	case *NewUserResp_SessionInfo:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionInfo); err != nil {
			return err
		}
	case *NewUserResp_ErrCode:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ErrCode))
	case nil:
	default:
		return fmt.Errorf("NewUserResp.Response has unexpected type %T", x)
	}
	return nil
}

func _NewUserResp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NewUserResp)
	switch tag {
	case 1: // response.session_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessInfo)
		err := b.DecodeMessage(msg)
		m.Response = &NewUserResp_SessionInfo{msg}
		return true, err
	case 2: // response.err_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &NewUserResp_ErrCode{ErrCode(x)}
		return true, err
	default:
		return false, nil
	}
}

func _NewUserResp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NewUserResp)
	// response
	switch x := m.Response.(type) {
	case *NewUserResp_SessionInfo:
		s := proto.Size(x.SessionInfo)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NewUserResp_ErrCode:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ErrCode))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LoginReq struct {
	// Types that are valid to be assigned to LoginSteps:
	//	*LoginReq_Step1
	//	*LoginReq_Step2
	//	*LoginReq_Step3
	LoginSteps isLoginReq_LoginSteps `protobuf_oneof:"login_steps"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isLoginReq_LoginSteps interface {
	isLoginReq_LoginSteps()
}

type LoginReq_Step1 struct {
	Step1 *Username `protobuf:"bytes,1,opt,name=step1,oneof"`
}
type LoginReq_Step2 struct {
	Step2 *FirstChallenge `protobuf:"bytes,2,opt,name=step2,oneof"`
}
type LoginReq_Step3 struct {
	Step3 *SecondChallenge `protobuf:"bytes,3,opt,name=step3,oneof"`
}

func (*LoginReq_Step1) isLoginReq_LoginSteps() {}
func (*LoginReq_Step2) isLoginReq_LoginSteps() {}
func (*LoginReq_Step3) isLoginReq_LoginSteps() {}

func (m *LoginReq) GetLoginSteps() isLoginReq_LoginSteps {
	if m != nil {
		return m.LoginSteps
	}
	return nil
}

func (m *LoginReq) GetStep1() *Username {
	if x, ok := m.GetLoginSteps().(*LoginReq_Step1); ok {
		return x.Step1
	}
	return nil
}

func (m *LoginReq) GetStep2() *FirstChallenge {
	if x, ok := m.GetLoginSteps().(*LoginReq_Step2); ok {
		return x.Step2
	}
	return nil
}

func (m *LoginReq) GetStep3() *SecondChallenge {
	if x, ok := m.GetLoginSteps().(*LoginReq_Step3); ok {
		return x.Step3
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoginReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoginReq_OneofMarshaler, _LoginReq_OneofUnmarshaler, _LoginReq_OneofSizer, []interface{}{
		(*LoginReq_Step1)(nil),
		(*LoginReq_Step2)(nil),
		(*LoginReq_Step3)(nil),
	}
}

func _LoginReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoginReq)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginReq_Step1:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step1); err != nil {
			return err
		}
	case *LoginReq_Step2:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step2); err != nil {
			return err
		}
	case *LoginReq_Step3:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step3); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LoginReq.LoginSteps has unexpected type %T", x)
	}
	return nil
}

func _LoginReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoginReq)
	switch tag {
	case 1: // login_steps.step1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Username)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginReq_Step1{msg}
		return true, err
	case 2: // login_steps.step2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FirstChallenge)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginReq_Step2{msg}
		return true, err
	case 3: // login_steps.step3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecondChallenge)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginReq_Step3{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LoginReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoginReq)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginReq_Step1:
		s := proto.Size(x.Step1)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginReq_Step2:
		s := proto.Size(x.Step2)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginReq_Step3:
		s := proto.Size(x.Step3)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Username struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Username) Reset()                    { *m = Username{} }
func (m *Username) String() string            { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()               {}
func (*Username) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FirstChallenge struct {
	EncChToken []byte `protobuf:"bytes,1,opt,name=enc_ch_token,json=encChToken,proto3" json:"enc_ch_token,omitempty"`
}

func (m *FirstChallenge) Reset()                    { *m = FirstChallenge{} }
func (m *FirstChallenge) String() string            { return proto.CompactTextString(m) }
func (*FirstChallenge) ProtoMessage()               {}
func (*FirstChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SecondChallenge struct {
	FinalChallenge []byte `protobuf:"bytes,1,opt,name=final_challenge,json=finalChallenge,proto3" json:"final_challenge,omitempty"`
}

func (m *SecondChallenge) Reset()                    { *m = SecondChallenge{} }
func (m *SecondChallenge) String() string            { return proto.CompactTextString(m) }
func (*SecondChallenge) ProtoMessage()               {}
func (*SecondChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LoginResp struct {
	// Types that are valid to be assigned to LoginSteps:
	//	*LoginResp_Step1
	//	*LoginResp_Step2
	//	*LoginResp_Step3
	//	*LoginResp_ErrCode
	LoginSteps isLoginResp_LoginSteps `protobuf_oneof:"login_steps"`
}

func (m *LoginResp) Reset()                    { *m = LoginResp{} }
func (m *LoginResp) String() string            { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()               {}
func (*LoginResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isLoginResp_LoginSteps interface {
	isLoginResp_LoginSteps()
}

type LoginResp_Step1 struct {
	Step1 string `protobuf:"bytes,1,opt,name=step1,oneof"`
}
type LoginResp_Step2 struct {
	Step2 *UserInfo `protobuf:"bytes,2,opt,name=step2,oneof"`
}
type LoginResp_Step3 struct {
	Step3 *SessInfo `protobuf:"bytes,3,opt,name=step3,oneof"`
}
type LoginResp_ErrCode struct {
	ErrCode ErrCode `protobuf:"varint,4,opt,name=err_code,json=errCode,enum=protodef.ErrCode,oneof"`
}

func (*LoginResp_Step1) isLoginResp_LoginSteps()   {}
func (*LoginResp_Step2) isLoginResp_LoginSteps()   {}
func (*LoginResp_Step3) isLoginResp_LoginSteps()   {}
func (*LoginResp_ErrCode) isLoginResp_LoginSteps() {}

func (m *LoginResp) GetLoginSteps() isLoginResp_LoginSteps {
	if m != nil {
		return m.LoginSteps
	}
	return nil
}

func (m *LoginResp) GetStep1() string {
	if x, ok := m.GetLoginSteps().(*LoginResp_Step1); ok {
		return x.Step1
	}
	return ""
}

func (m *LoginResp) GetStep2() *UserInfo {
	if x, ok := m.GetLoginSteps().(*LoginResp_Step2); ok {
		return x.Step2
	}
	return nil
}

func (m *LoginResp) GetStep3() *SessInfo {
	if x, ok := m.GetLoginSteps().(*LoginResp_Step3); ok {
		return x.Step3
	}
	return nil
}

func (m *LoginResp) GetErrCode() ErrCode {
	if x, ok := m.GetLoginSteps().(*LoginResp_ErrCode); ok {
		return x.ErrCode
	}
	return ErrCode_EALREADYINVITED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoginResp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoginResp_OneofMarshaler, _LoginResp_OneofUnmarshaler, _LoginResp_OneofSizer, []interface{}{
		(*LoginResp_Step1)(nil),
		(*LoginResp_Step2)(nil),
		(*LoginResp_Step3)(nil),
		(*LoginResp_ErrCode)(nil),
	}
}

func _LoginResp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoginResp)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginResp_Step1:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Step1)
	case *LoginResp_Step2:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step2); err != nil {
			return err
		}
	case *LoginResp_Step3:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step3); err != nil {
			return err
		}
	case *LoginResp_ErrCode:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ErrCode))
	case nil:
	default:
		return fmt.Errorf("LoginResp.LoginSteps has unexpected type %T", x)
	}
	return nil
}

func _LoginResp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoginResp)
	switch tag {
	case 1: // login_steps.step1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LoginSteps = &LoginResp_Step1{x}
		return true, err
	case 2: // login_steps.step2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserInfo)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginResp_Step2{msg}
		return true, err
	case 3: // login_steps.step3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessInfo)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginResp_Step3{msg}
		return true, err
	case 4: // login_steps.err_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.LoginSteps = &LoginResp_ErrCode{ErrCode(x)}
		return true, err
	default:
		return false, nil
	}
}

func _LoginResp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoginResp)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginResp_Step1:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Step1)))
		n += len(x.Step1)
	case *LoginResp_Step2:
		s := proto.Size(x.Step2)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginResp_Step3:
		s := proto.Size(x.Step3)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginResp_ErrCode:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ErrCode))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserInfo struct {
	PublicKey     []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	EncPrivateKey []byte `protobuf:"bytes,2,opt,name=enc_private_key,json=encPrivateKey,proto3" json:"enc_private_key,omitempty"`
	EncChToken    []byte `protobuf:"bytes,3,opt,name=enc_ch_token,json=encChToken,proto3" json:"enc_ch_token,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SessInfo struct {
	Uid       int64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessInfo) Reset()                    { *m = SessInfo{} }
func (m *SessInfo) String() string            { return proto.CompactTextString(m) }
func (*SessInfo) ProtoMessage()               {}
func (*SessInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*ErrCodeResp)(nil), "protodef.ErrCodeResp")
	proto.RegisterType((*NewUserReq)(nil), "protodef.NewUserReq")
	proto.RegisterType((*NewUserResp)(nil), "protodef.NewUserResp")
	proto.RegisterType((*LoginReq)(nil), "protodef.LoginReq")
	proto.RegisterType((*Username)(nil), "protodef.Username")
	proto.RegisterType((*FirstChallenge)(nil), "protodef.FirstChallenge")
	proto.RegisterType((*SecondChallenge)(nil), "protodef.SecondChallenge")
	proto.RegisterType((*LoginResp)(nil), "protodef.LoginResp")
	proto.RegisterType((*UserInfo)(nil), "protodef.UserInfo")
	proto.RegisterType((*SessInfo)(nil), "protodef.SessInfo")
	proto.RegisterEnum("protodef.ErrCode", ErrCode_name, ErrCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Uplink service

type UplinkClient interface {
	Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*ErrCodeResp, error)
	LoginExchange(ctx context.Context, opts ...grpc.CallOption) (Uplink_LoginExchangeClient, error)
	NewUser(ctx context.Context, in *NewUserReq, opts ...grpc.CallOption) (*NewUserResp, error)
	Resume(ctx context.Context, in *SessInfo, opts ...grpc.CallOption) (*ErrCodeResp, error)
}

type uplinkClient struct {
	cc *grpc.ClientConn
}

func NewUplinkClient(cc *grpc.ClientConn) UplinkClient {
	return &uplinkClient{cc}
}

func (c *uplinkClient) Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*ErrCodeResp, error) {
	out := new(ErrCodeResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) LoginExchange(ctx context.Context, opts ...grpc.CallOption) (Uplink_LoginExchangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Uplink_serviceDesc.Streams[0], c.cc, "/protodef.Uplink/LoginExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &uplinkLoginExchangeClient{stream}
	return x, nil
}

type Uplink_LoginExchangeClient interface {
	Send(*LoginReq) error
	Recv() (*LoginResp, error)
	grpc.ClientStream
}

type uplinkLoginExchangeClient struct {
	grpc.ClientStream
}

func (x *uplinkLoginExchangeClient) Send(m *LoginReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uplinkLoginExchangeClient) Recv() (*LoginResp, error) {
	m := new(LoginResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uplinkClient) NewUser(ctx context.Context, in *NewUserReq, opts ...grpc.CallOption) (*NewUserResp, error) {
	out := new(NewUserResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Resume(ctx context.Context, in *SessInfo, opts ...grpc.CallOption) (*ErrCodeResp, error) {
	out := new(ErrCodeResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Resume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uplink service

type UplinkServer interface {
	Exists(context.Context, *Username) (*ErrCodeResp, error)
	LoginExchange(Uplink_LoginExchangeServer) error
	NewUser(context.Context, *NewUserReq) (*NewUserResp, error)
	Resume(context.Context, *SessInfo) (*ErrCodeResp, error)
}

func RegisterUplinkServer(s *grpc.Server, srv UplinkServer) {
	s.RegisterService(&_Uplink_serviceDesc, srv)
}

func _Uplink_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Exists(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_LoginExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UplinkServer).LoginExchange(&uplinkLoginExchangeServer{stream})
}

type Uplink_LoginExchangeServer interface {
	Send(*LoginResp) error
	Recv() (*LoginReq, error)
	grpc.ServerStream
}

type uplinkLoginExchangeServer struct {
	grpc.ServerStream
}

func (x *uplinkLoginExchangeServer) Send(m *LoginResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uplinkLoginExchangeServer) Recv() (*LoginReq, error) {
	m := new(LoginReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Uplink_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).NewUser(ctx, req.(*NewUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Resume(ctx, req.(*SessInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodef.Uplink",
	HandlerType: (*UplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Uplink_Exists_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _Uplink_NewUser_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Uplink_Resume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoginExchange",
			Handler:       _Uplink_LoginExchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("uplink.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0x24, 0x24, 0xf6, 0x71, 0x7e, 0xcc, 0x70, 0xb9, 0x0a, 0x48, 0xf7, 0x0a, 0x65, 0x71,
	0x2f, 0xca, 0x22, 0x02, 0x47, 0x6a, 0xa5, 0xb6, 0x1b, 0x27, 0x4c, 0x44, 0x44, 0xe2, 0x20, 0xe3,
	0x20, 0xb1, 0x8a, 0x82, 0x33, 0x80, 0x45, 0xb0, 0x5d, 0x4f, 0xd2, 0xc2, 0xb6, 0xcf, 0xd2, 0x55,
	0x1f, 0xa1, 0xdb, 0xbe, 0x4c, 0x1f, 0xa3, 0x33, 0x63, 0x3b, 0x7f, 0x4e, 0x25, 0xa4, 0xae, 0xec,
	0xf9, 0xe6, 0x3b, 0x7f, 0xdf, 0x39, 0x67, 0xa0, 0x30, 0x0b, 0x26, 0xae, 0xf7, 0x58, 0x0f, 0x42,
	0x7f, 0xea, 0x23, 0x59, 0x7c, 0xc6, 0xe4, 0xae, 0x4a, 0x40, 0xc5, 0x61, 0xd8, 0x62, 0xff, 0x16,
	0xa1, 0x01, 0x3a, 0x84, 0x3c, 0x9d, 0x39, 0x0e, 0xa1, 0xb4, 0x22, 0x1d, 0x49, 0xc7, 0xf2, 0xf9,
	0x96, 0x95, 0x00, 0xa8, 0x0e, 0x32, 0x09, 0xc3, 0xa1, 0xc3, 0xb8, 0x95, 0x6d, 0x76, 0x59, 0xd2,
	0x77, 0xeb, 0x89, 0x9f, 0x7a, 0xec, 0x84, 0xf3, 0x49, 0xf4, 0xdb, 0x04, 0x90, 0x43, 0xe6, 0xd3,
	0xf7, 0x28, 0xa9, 0x7e, 0x95, 0x00, 0x4c, 0xf2, 0x79, 0x40, 0x49, 0x68, 0x91, 0x8f, 0x08, 0x41,
	0xd6, 0x1b, 0x3d, 0x11, 0x11, 0x43, 0xb1, 0xc4, 0x3f, 0xfa, 0x07, 0x20, 0x98, 0xdd, 0x4e, 0x5c,
	0x67, 0xf8, 0x48, 0x5e, 0x44, 0x80, 0x82, 0xa5, 0x44, 0xc8, 0x05, 0x79, 0x41, 0xff, 0x41, 0x99,
	0x78, 0xce, 0x30, 0x08, 0xdd, 0x4f, 0xa3, 0x29, 0x11, 0x9c, 0x8c, 0xe0, 0x14, 0x19, 0x7c, 0x19,
	0xa1, 0x9c, 0x77, 0x00, 0xb2, 0xf3, 0x30, 0x9c, 0xfa, 0x8f, 0xc4, 0xab, 0x64, 0x85, 0xfb, 0xbc,
	0xf3, 0x60, 0xf3, 0x23, 0x3a, 0x82, 0x02, 0x77, 0x31, 0xbf, 0xde, 0x11, 0xf6, 0xc0, 0xb0, 0x56,
	0xc4, 0xa8, 0x7e, 0x91, 0x40, 0x9d, 0xa7, 0xc9, 0xe4, 0x78, 0x0b, 0x05, 0xca, 0x4a, 0x77, 0x7d,
	0x6f, 0xe8, 0x7a, 0x77, 0xbe, 0xc8, 0x57, 0xd5, 0xd1, 0xa2, 0xec, 0x2b, 0x76, 0xdb, 0x61, 0x37,
	0xac, 0x6e, 0x35, 0x66, 0xf2, 0xe3, 0x1f, 0x69, 0xf5, 0x4d, 0x02, 0xb9, 0xeb, 0xdf, 0xbb, 0x1e,
	0x57, 0xaa, 0x06, 0x3b, 0x74, 0x4a, 0x82, 0xd3, 0x74, 0x68, 0x9e, 0x24, 0x17, 0x8e, 0xb9, 0x89,
	0x28, 0xe8, 0x24, 0xe2, 0xea, 0x22, 0xa2, 0xaa, 0x57, 0x16, 0xdc, 0xb6, 0x1b, 0xd2, 0x69, 0xeb,
	0x61, 0x34, 0x99, 0x10, 0xef, 0x7e, 0x6e, 0xa1, 0xa3, 0xd3, 0xc8, 0xa2, 0x21, 0xa4, 0x54, 0xf5,
	0x83, 0xe5, 0xc2, 0x1c, 0xdf, 0x1b, 0xa7, 0x4c, 0x1a, 0xcd, 0x22, 0xa8, 0x13, 0x9e, 0xdc, 0x90,
	0x1f, 0x69, 0xf5, 0x5f, 0x90, 0x93, 0x44, 0x36, 0x75, 0xb5, 0xaa, 0x43, 0x69, 0x35, 0x78, 0xaa,
	0x0b, 0x52, 0xaa, 0x0b, 0xef, 0xa0, 0xbc, 0x16, 0x1e, 0xfd, 0x0f, 0xe5, 0x3b, 0xd7, 0x1b, 0x4d,
	0x98, 0x59, 0x0c, 0xc5, 0x76, 0x25, 0x01, 0xcf, 0x89, 0xd5, 0xef, 0x12, 0x28, 0xb1, 0x78, 0xac,
	0x7f, 0x7f, 0x2f, 0xab, 0xa7, 0x2c, 0x94, 0xaa, 0xad, 0x2a, 0xb5, 0xa6, 0x6a, 0xdc, 0xd0, 0x58,
	0xa3, 0xda, 0xaa, 0x46, 0x9b, 0x9b, 0x1f, 0x51, 0x56, 0xda, 0x9e, 0x7d, 0x45, 0xdb, 0xd7, 0xc4,
	0xa4, 0x91, 0x98, 0x62, 0x82, 0x56, 0xd7, 0x41, 0x7a, 0xc5, 0x3a, 0x6c, 0x6f, 0x5a, 0x87, 0x75,
	0xb5, 0x33, 0x29, 0xb5, 0xdf, 0x83, 0x9c, 0x14, 0x82, 0x34, 0xc8, 0xcc, 0xdc, 0xb1, 0x88, 0x96,
	0xb1, 0xf8, 0x2f, 0x4f, 0x63, 0xbe, 0x01, 0x63, 0x11, 0x42, 0xb1, 0x94, 0x64, 0xd2, 0xc7, 0xb5,
	0x1f, 0x12, 0xe4, 0xe3, 0xba, 0xd0, 0x1e, 0x94, 0xb1, 0xd1, 0xb5, 0xb0, 0x71, 0x76, 0xd3, 0x31,
	0xaf, 0x3b, 0x36, 0x3e, 0xd3, 0xb6, 0x50, 0x09, 0x00, 0xe3, 0xde, 0xa5, 0x7d, 0xd3, 0xea, 0x9b,
	0xd7, 0x9a, 0x84, 0xf6, 0x61, 0x17, 0x9b, 0x46, 0x2f, 0x21, 0xda, 0xc6, 0x05, 0x36, 0xb5, 0x6d,
	0xa4, 0x32, 0x37, 0x66, 0x5f, 0x70, 0x32, 0xf1, 0x61, 0x70, 0x85, 0x2d, 0x2d, 0x8b, 0xca, 0xec,
	0x81, 0x32, 0xfb, 0x76, 0xe2, 0x71, 0x47, 0x78, 0x64, 0x40, 0x0f, 0xf7, 0x9a, 0x8c, 0x90, 0x13,
	0x84, 0x2b, 0xdc, 0x6d, 0x47, 0x0c, 0x2d, 0xcf, 0x8a, 0x28, 0x30, 0xc0, 0xba, 0xc6, 0x56, 0xdb,
	0x18, 0x74, 0x6d, 0x4d, 0x16, 0x94, 0xa6, 0xd5, 0xbf, 0xc0, 0x97, 0x56, 0xdf, 0xee, 0x6b, 0x0a,
	0x2a, 0x82, 0x82, 0x8d, 0x81, 0x7d, 0xde, 0x36, 0x3a, 0x5d, 0x0d, 0xf4, 0x9f, 0x12, 0xe4, 0x06,
	0xe2, 0x7d, 0x44, 0x0d, 0xc8, 0xe1, 0x67, 0x97, 0x4e, 0x29, 0xda, 0xb0, 0x6a, 0x87, 0xfb, 0xa9,
	0x6e, 0x8a, 0x31, 0xfb, 0x00, 0x45, 0x31, 0x73, 0xf8, 0x99, 0x8d, 0x27, 0x1f, 0xd7, 0x25, 0xdb,
	0x64, 0x93, 0x0f, 0xf7, 0x52, 0x18, 0x0d, 0x8e, 0xa5, 0x13, 0x09, 0xbd, 0x81, 0x7c, 0xfc, 0xe6,
	0xa0, 0xbf, 0x16, 0x9c, 0xc5, 0x6b, 0xb9, 0x1c, 0x75, 0xf9, 0x71, 0x62, 0xa9, 0xb2, 0xef, 0xec,
	0x69, 0x25, 0x5c, 0xd2, 0xca, 0xdf, 0xa4, 0x7a, 0x9b, 0x13, 0x68, 0xe3, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x13, 0x37, 0x91, 0xa8, 0x10, 0x06, 0x00, 0x00,
}
