// Code generated by protoc-gen-go.
// source: uplink.proto
// DO NOT EDIT!

/*
Package protodef is a generated protocol buffer package.

It is generated from these files:
	uplink.proto

It has these top-level messages:
	BoolResp
	NewUserReq
	NewUserResp
	LoginReq
	Username
	AuthInfo
	Challenge
	LoginResp
	LoginAccepted
	UserInfo
	SessInfo
*/
package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BoolResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BoolResp) Reset()                    { *m = BoolResp{} }
func (m *BoolResp) String() string            { return proto.CompactTextString(m) }
func (*BoolResp) ProtoMessage()               {}
func (*BoolResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NewUserReq struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pass          string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
	PublicKey     []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	EncPrivateKey []byte `protobuf:"bytes,4,opt,name=enc_private_key,json=encPrivateKey,proto3" json:"enc_private_key,omitempty"`
	KeyIv         []byte `protobuf:"bytes,5,opt,name=key_iv,json=keyIv,proto3" json:"key_iv,omitempty"`
	KeySalt       []byte `protobuf:"bytes,6,opt,name=key_salt,json=keySalt,proto3" json:"key_salt,omitempty"`
}

func (m *NewUserReq) Reset()                    { *m = NewUserReq{} }
func (m *NewUserReq) String() string            { return proto.CompactTextString(m) }
func (*NewUserReq) ProtoMessage()               {}
func (*NewUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NewUserResp struct {
	SessionInfo *SessInfo `protobuf:"bytes,1,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
}

func (m *NewUserResp) Reset()                    { *m = NewUserResp{} }
func (m *NewUserResp) String() string            { return proto.CompactTextString(m) }
func (*NewUserResp) ProtoMessage()               {}
func (*NewUserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewUserResp) GetSessionInfo() *SessInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

type LoginReq struct {
	// Types that are valid to be assigned to LoginSteps:
	//	*LoginReq_Step1
	//	*LoginReq_Step2
	LoginSteps isLoginReq_LoginSteps `protobuf_oneof:"login_steps"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isLoginReq_LoginSteps interface {
	isLoginReq_LoginSteps()
}

type LoginReq_Step1 struct {
	Step1 *AuthInfo `protobuf:"bytes,1,opt,name=step1,oneof"`
}
type LoginReq_Step2 struct {
	Step2 *Challenge `protobuf:"bytes,2,opt,name=step2,oneof"`
}

func (*LoginReq_Step1) isLoginReq_LoginSteps() {}
func (*LoginReq_Step2) isLoginReq_LoginSteps() {}

func (m *LoginReq) GetLoginSteps() isLoginReq_LoginSteps {
	if m != nil {
		return m.LoginSteps
	}
	return nil
}

func (m *LoginReq) GetStep1() *AuthInfo {
	if x, ok := m.GetLoginSteps().(*LoginReq_Step1); ok {
		return x.Step1
	}
	return nil
}

func (m *LoginReq) GetStep2() *Challenge {
	if x, ok := m.GetLoginSteps().(*LoginReq_Step2); ok {
		return x.Step2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoginReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoginReq_OneofMarshaler, _LoginReq_OneofUnmarshaler, _LoginReq_OneofSizer, []interface{}{
		(*LoginReq_Step1)(nil),
		(*LoginReq_Step2)(nil),
	}
}

func _LoginReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoginReq)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginReq_Step1:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step1); err != nil {
			return err
		}
	case *LoginReq_Step2:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LoginReq.LoginSteps has unexpected type %T", x)
	}
	return nil
}

func _LoginReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoginReq)
	switch tag {
	case 1: // login_steps.step1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthInfo)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginReq_Step1{msg}
		return true, err
	case 2: // login_steps.step2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Challenge)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginReq_Step2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LoginReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoginReq)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginReq_Step1:
		s := proto.Size(x.Step1)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginReq_Step2:
		s := proto.Size(x.Step2)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Username struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Username) Reset()                    { *m = Username{} }
func (m *Username) String() string            { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()               {}
func (*Username) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AuthInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *AuthInfo) Reset()                    { *m = AuthInfo{} }
func (m *AuthInfo) String() string            { return proto.CompactTextString(m) }
func (*AuthInfo) ProtoMessage()               {}
func (*AuthInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Challenge struct {
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LoginResp struct {
	// Types that are valid to be assigned to LoginSteps:
	//	*LoginResp_Step1
	//	*LoginResp_Step2
	LoginSteps isLoginResp_LoginSteps `protobuf_oneof:"login_steps"`
}

func (m *LoginResp) Reset()                    { *m = LoginResp{} }
func (m *LoginResp) String() string            { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()               {}
func (*LoginResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isLoginResp_LoginSteps interface {
	isLoginResp_LoginSteps()
}

type LoginResp_Step1 struct {
	Step1 *LoginAccepted `protobuf:"bytes,1,opt,name=step1,oneof"`
}
type LoginResp_Step2 struct {
	Step2 *SessInfo `protobuf:"bytes,2,opt,name=step2,oneof"`
}

func (*LoginResp_Step1) isLoginResp_LoginSteps() {}
func (*LoginResp_Step2) isLoginResp_LoginSteps() {}

func (m *LoginResp) GetLoginSteps() isLoginResp_LoginSteps {
	if m != nil {
		return m.LoginSteps
	}
	return nil
}

func (m *LoginResp) GetStep1() *LoginAccepted {
	if x, ok := m.GetLoginSteps().(*LoginResp_Step1); ok {
		return x.Step1
	}
	return nil
}

func (m *LoginResp) GetStep2() *SessInfo {
	if x, ok := m.GetLoginSteps().(*LoginResp_Step2); ok {
		return x.Step2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoginResp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoginResp_OneofMarshaler, _LoginResp_OneofUnmarshaler, _LoginResp_OneofSizer, []interface{}{
		(*LoginResp_Step1)(nil),
		(*LoginResp_Step2)(nil),
	}
}

func _LoginResp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoginResp)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginResp_Step1:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step1); err != nil {
			return err
		}
	case *LoginResp_Step2:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LoginResp.LoginSteps has unexpected type %T", x)
	}
	return nil
}

func _LoginResp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoginResp)
	switch tag {
	case 1: // login_steps.step1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoginAccepted)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginResp_Step1{msg}
		return true, err
	case 2: // login_steps.step2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessInfo)
		err := b.DecodeMessage(msg)
		m.LoginSteps = &LoginResp_Step2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LoginResp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoginResp)
	// login_steps
	switch x := m.LoginSteps.(type) {
	case *LoginResp_Step1:
		s := proto.Size(x.Step1)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LoginResp_Step2:
		s := proto.Size(x.Step2)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LoginAccepted struct {
	UserInfo  *UserInfo  `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Challenge *Challenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *LoginAccepted) Reset()                    { *m = LoginAccepted{} }
func (m *LoginAccepted) String() string            { return proto.CompactTextString(m) }
func (*LoginAccepted) ProtoMessage()               {}
func (*LoginAccepted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginAccepted) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *LoginAccepted) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type UserInfo struct {
	PublicKey     []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	EncPrivateKey []byte `protobuf:"bytes,2,opt,name=enc_private_key,json=encPrivateKey,proto3" json:"enc_private_key,omitempty"`
	KeyIv         []byte `protobuf:"bytes,5,opt,name=key_iv,json=keyIv,proto3" json:"key_iv,omitempty"`
	KeySalt       []byte `protobuf:"bytes,6,opt,name=key_salt,json=keySalt,proto3" json:"key_salt,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SessInfo struct {
	Uid       int64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessInfo) Reset()                    { *m = SessInfo{} }
func (m *SessInfo) String() string            { return proto.CompactTextString(m) }
func (*SessInfo) ProtoMessage()               {}
func (*SessInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*BoolResp)(nil), "protodef.BoolResp")
	proto.RegisterType((*NewUserReq)(nil), "protodef.NewUserReq")
	proto.RegisterType((*NewUserResp)(nil), "protodef.NewUserResp")
	proto.RegisterType((*LoginReq)(nil), "protodef.LoginReq")
	proto.RegisterType((*Username)(nil), "protodef.Username")
	proto.RegisterType((*AuthInfo)(nil), "protodef.AuthInfo")
	proto.RegisterType((*Challenge)(nil), "protodef.Challenge")
	proto.RegisterType((*LoginResp)(nil), "protodef.LoginResp")
	proto.RegisterType((*LoginAccepted)(nil), "protodef.LoginAccepted")
	proto.RegisterType((*UserInfo)(nil), "protodef.UserInfo")
	proto.RegisterType((*SessInfo)(nil), "protodef.SessInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Uplink service

type UplinkClient interface {
	Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolResp, error)
	LoginExchange(ctx context.Context, opts ...grpc.CallOption) (Uplink_LoginExchangeClient, error)
	NewUser(ctx context.Context, in *NewUserReq, opts ...grpc.CallOption) (*NewUserResp, error)
	Resume(ctx context.Context, in *SessInfo, opts ...grpc.CallOption) (*BoolResp, error)
}

type uplinkClient struct {
	cc *grpc.ClientConn
}

func NewUplinkClient(cc *grpc.ClientConn) UplinkClient {
	return &uplinkClient{cc}
}

func (c *uplinkClient) Exists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) LoginExchange(ctx context.Context, opts ...grpc.CallOption) (Uplink_LoginExchangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Uplink_serviceDesc.Streams[0], c.cc, "/protodef.Uplink/LoginExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &uplinkLoginExchangeClient{stream}
	return x, nil
}

type Uplink_LoginExchangeClient interface {
	Send(*LoginReq) error
	Recv() (*LoginResp, error)
	grpc.ClientStream
}

type uplinkLoginExchangeClient struct {
	grpc.ClientStream
}

func (x *uplinkLoginExchangeClient) Send(m *LoginReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uplinkLoginExchangeClient) Recv() (*LoginResp, error) {
	m := new(LoginResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uplinkClient) NewUser(ctx context.Context, in *NewUserReq, opts ...grpc.CallOption) (*NewUserResp, error) {
	out := new(NewUserResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Resume(ctx context.Context, in *SessInfo, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := grpc.Invoke(ctx, "/protodef.Uplink/Resume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uplink service

type UplinkServer interface {
	Exists(context.Context, *Username) (*BoolResp, error)
	LoginExchange(Uplink_LoginExchangeServer) error
	NewUser(context.Context, *NewUserReq) (*NewUserResp, error)
	Resume(context.Context, *SessInfo) (*BoolResp, error)
}

func RegisterUplinkServer(s *grpc.Server, srv UplinkServer) {
	s.RegisterService(&_Uplink_serviceDesc, srv)
}

func _Uplink_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Exists(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_LoginExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UplinkServer).LoginExchange(&uplinkLoginExchangeServer{stream})
}

type Uplink_LoginExchangeServer interface {
	Send(*LoginResp) error
	Recv() (*LoginReq, error)
	grpc.ServerStream
}

type uplinkLoginExchangeServer struct {
	grpc.ServerStream
}

func (x *uplinkLoginExchangeServer) Send(m *LoginResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uplinkLoginExchangeServer) Recv() (*LoginReq, error) {
	m := new(LoginReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Uplink_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).NewUser(ctx, req.(*NewUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Uplink/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Resume(ctx, req.(*SessInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodef.Uplink",
	HandlerType: (*UplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Uplink_Exists_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _Uplink_NewUser_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Uplink_Resume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoginExchange",
			Handler:       _Uplink_LoginExchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("uplink.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0xdd, 0x34, 0x8e, 0x3d, 0x4e, 0xf4, 0xa3, 0x6d, 0x2b, 0x4c, 0x24, 0x10, 0x58, 0x08,
	0x95, 0x22, 0x99, 0xd6, 0x08, 0x2e, 0x70, 0x69, 0xa0, 0x12, 0x15, 0x08, 0x55, 0xae, 0x7a, 0xb6,
	0x1c, 0x7b, 0x9b, 0xac, 0xe2, 0x78, 0x4d, 0xd6, 0x4e, 0xdb, 0x33, 0xcf, 0xc3, 0x4b, 0xf1, 0x24,
	0xcc, 0xae, 0xed, 0x18, 0xa7, 0x29, 0xea, 0x81, 0x93, 0x77, 0x66, 0xbe, 0xf1, 0xcc, 0xf7, 0xcd,
	0xec, 0x42, 0xbf, 0xc8, 0x12, 0x96, 0xce, 0xdc, 0x6c, 0xc1, 0x73, 0x4e, 0x0c, 0xf5, 0x89, 0xe9,
	0xa5, 0xf3, 0x1c, 0x8c, 0x11, 0xe7, 0x89, 0x4f, 0x45, 0x46, 0x6c, 0xe8, 0x89, 0x22, 0x8a, 0xa8,
	0x10, 0xb6, 0xf6, 0x54, 0xdb, 0x37, 0xfc, 0xda, 0x74, 0x7e, 0x6a, 0x00, 0xdf, 0xe8, 0xd5, 0x85,
	0xa0, 0x0b, 0x9f, 0x7e, 0x27, 0x04, 0xb6, 0xd3, 0x70, 0x4e, 0x15, 0xca, 0xf4, 0xd5, 0x59, 0xfa,
	0xb2, 0x10, 0x33, 0xb7, 0x4a, 0x9f, 0x3c, 0x93, 0xc7, 0x00, 0x59, 0x31, 0x4e, 0x58, 0x14, 0xcc,
	0xe8, 0x8d, 0xdd, 0xc1, 0x48, 0xdf, 0x37, 0x4b, 0xcf, 0x17, 0x7a, 0x43, 0x5e, 0xc0, 0xff, 0x34,
	0x8d, 0x82, 0x6c, 0xc1, 0x96, 0x61, 0x4e, 0x15, 0x66, 0x5b, 0x61, 0x06, 0xe8, 0x3e, 0x2b, 0xbd,
	0x12, 0xb7, 0x07, 0x3a, 0xc6, 0x02, 0xb6, 0xb4, 0xbb, 0x2a, 0xdc, 0x45, 0xeb, 0x74, 0x49, 0x1e,
	0x81, 0x21, 0xdd, 0x22, 0x4c, 0x72, 0x5b, 0x57, 0x81, 0x1e, 0xda, 0xe7, 0x68, 0x3a, 0x9f, 0xc0,
	0x5a, 0xb5, 0x8b, 0xc4, 0xde, 0x42, 0x5f, 0x20, 0x0d, 0xc6, 0xd3, 0x80, 0xa5, 0x97, 0x5c, 0xf5,
	0x6d, 0x79, 0xc4, 0xad, 0x55, 0x70, 0xcf, 0x31, 0x7a, 0x8a, 0x11, 0xdf, 0xaa, 0x70, 0xd2, 0x70,
	0x16, 0x60, 0x7c, 0xe5, 0x13, 0x96, 0x4a, 0xca, 0x07, 0xd0, 0x15, 0x39, 0xcd, 0x8e, 0x6e, 0xe7,
	0x1e, 0x17, 0xf9, 0x54, 0xc2, 0x3f, 0xff, 0xe7, 0x97, 0x10, 0xf2, 0xaa, 0xc4, 0x7a, 0x4a, 0x0b,
	0xcb, 0xdb, 0x69, 0xb0, 0x1f, 0xa7, 0x61, 0x92, 0xd0, 0x74, 0x42, 0x6b, 0xb0, 0x37, 0x1a, 0x80,
	0x95, 0xc8, 0x22, 0x81, 0x34, 0x85, 0xf3, 0x04, 0x0c, 0xd9, 0x76, 0x2d, 0xe9, 0xba, 0xcc, 0x8e,
	0x07, 0x46, 0x5d, 0xf0, 0xbe, 0x63, 0x70, 0x9e, 0x81, 0xb9, 0x2a, 0x4c, 0x76, 0xa1, 0x9b, 0xf3,
	0x19, 0x4d, 0x55, 0x16, 0x6a, 0xa9, 0x0c, 0xe7, 0x0a, 0xcc, 0x8a, 0x2a, 0xca, 0xf5, 0xba, 0xcd,
	0xf5, 0x61, 0xd3, 0xbf, 0xc2, 0x1c, 0xe3, 0x4e, 0x64, 0x39, 0x8d, 0x1b, 0xc2, 0x07, 0x6d, 0xc2,
	0x1b, 0x84, 0xbd, 0x93, 0xaf, 0x80, 0x41, 0xeb, 0xa7, 0x58, 0xdc, 0x2c, 0x50, 0x80, 0x3b, 0x06,
	0x25, 0xb5, 0x51, 0x83, 0x32, 0x8a, 0xea, 0x44, 0x8e, 0xc0, 0x8c, 0x6a, 0x76, 0x7f, 0x51, 0xdc,
	0x6f, 0x50, 0xce, 0x0f, 0xad, 0x54, 0x59, 0xe5, 0xb7, 0x97, 0x54, 0xbb, 0xc7, 0x92, 0x6e, 0xfd,
	0x9b, 0x25, 0x7d, 0x0f, 0x46, 0x2d, 0x0f, 0x79, 0x00, 0x9d, 0x82, 0xc5, 0xaa, 0x7a, 0xc7, 0x97,
	0x47, 0xd9, 0xd6, 0x6a, 0x67, 0xe3, 0x6a, 0x9c, 0x66, 0xbd, 0x9d, 0xb1, 0xf7, 0x4b, 0x03, 0xfd,
	0x42, 0x5d, 0x69, 0x72, 0x08, 0xfa, 0xc9, 0x35, 0x13, 0xb9, 0x20, 0x6b, 0x42, 0xc9, 0x85, 0x18,
	0xfe, 0xe1, 0x5b, 0x5d, 0xf4, 0x0f, 0x95, 0xe8, 0x27, 0xd7, 0xa8, 0x89, 0x5c, 0x0a, 0xb2, 0x36,
	0x62, 0xdc, 0xf8, 0xe1, 0xce, 0x2d, 0x9f, 0xc8, 0xf6, 0xb5, 0x43, 0x8d, 0xbc, 0x83, 0x5e, 0x75,
	0xb9, 0xc8, 0x6e, 0x83, 0x69, 0x9e, 0x87, 0xe1, 0xde, 0x06, 0x2f, 0x56, 0xc5, 0x3e, 0xf1, 0x5b,
	0xcc, 0x5b, 0xe5, 0x6a, 0x05, 0x36, 0xf5, 0x39, 0x7a, 0x09, 0xc3, 0x88, 0xcf, 0xdd, 0x09, 0xcb,
	0xa7, 0xc5, 0xd8, 0x9d, 0x47, 0x2c, 0x49, 0x78, 0xca, 0xdc, 0xf2, 0x29, 0x1b, 0x59, 0x25, 0xff,
	0x33, 0x99, 0x36, 0xd6, 0x55, 0xf6, 0x9b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xa8, 0xcc,
	0x29, 0xe8, 0x04, 0x00, 0x00,
}
